C51 COMPILER V9.59.0.0   SEPTEMPERATUE                                                     06/24/2024 12:43:23 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SEPTEMPERATUE
OBJECT MODULE PLACED IN septemperatue.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE septemperatue.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.h>
   2          #include <absacc.h>
   3          
   4          // 定义数据类型
   5          #define u8  unsigned char
   6          #define u16 unsigned int
   7          #define u32 unsigned long  
   8          
   9          // 定义端口
  10          #define DT_DA_PORT XBYTE[0xe400]     // 数码管数据端口
  11          #define DT_DI_PORT XBYTE[0xe800]
  12          #define PWM_OUT_PORT XBYTE[0xc400]   // 传感器及PWM输出端口
  13          #define SPT_LOW_INPORT XBYTE[0xc100]
  14          #define SPT_HIG_INPORT XBYTE[0xc200]
  15          
  16          // 设定值
  17          int SetValue;
  18          
  19          // PID控制参数 (调整这些参数以获得更好的性能)
  20          float Kp = 0.5f;
  21          float Ki = 0.01f;
  22          float Kd = 0.1f;
  23          
  24          // 误差变量
  25          int et;
  26          int et_1;
  27          int et_2;
  28          
  29          // PID积分和微分项
  30          float integral = 0.0f;
  31          float derivative = 0.0f;
  32          
  33          // PWM变量
  34          static float pwm = 0.0f;  
  35          
  36          // 显示缓冲区
  37          u8 DispBuff[8] = {0, 0, 0, 0, 1, 1, 1, 7};
  38          
  39          // 串口接收缓冲区
  40          u8 ReceiveCounts = 0; 
  41          u8 Re_Buff[6];
  42          
  43          // 温度数据
  44          u16 temperature = 0;
  45          
  46          // 发送一个字节
  47          void send_byte(u8 dat) {
  48   1          SBUF = dat;
  49   1          while(!TI);
  50   1          TI = 0;
  51   1      }
  52          
  53          // 发送温度数据
  54          void send_temperature() {
  55   1          send_byte(0x55);  // 起始字节
C51 COMPILER V9.59.0.0   SEPTEMPERATUE                                                     06/24/2024 12:43:23 PAGE 2   

  56   1          send_byte(0x00);
  57   1          send_byte(0x00);
  58   1          send_byte((u8)(temperature >> 8));  // 高字节
  59   1          send_byte((u8)(temperature));  // 低字节
  60   1          send_byte(0xaa);  // 结束字节
  61   1      }
  62          
  63          // 主函数
  64          void main() {
  65   1          // 串口初始化
  66   1          PCON |= 0x80;   // 设置SMOD为1，波特率加倍
  67   1          SCON = 0x50;    // 设置串口为模式1（8位UART）
  68   1          TMOD = 0x20;    // 设置定时器1为模式2（8位自动重装载）
  69   1          TL1 = TH1 = 0xFD;  // 本来是 9600 Bauds @ 11.0592MHz，现在SMOD使其加倍到 19200 Bauds
  70   1          TR1 = 1;
  71   1              
  72   1          // 定时器0初始化
  73   1          TMOD |= 0x01;  // 设置定时器0为模式1 (16位定时器)
  74   1          TH0 = 0x3C;    // 设置初值以便定时 50ms (假设晶振频率为11.0592MHz)
  75   1          TL0 = 0xB0;
  76   1          ET0 = 1;       // 使能定时器0中断
  77   1          TR0 = 1;       // 启动定时器0
  78   1      
  79   1          // 中断初始化
  80   1          IT0 = 1;
  81   1          IT1 = 1;
  82   1          EX0 = 1;
  83   1          EX1 = 1;
  84   1          ES = 1;  // 使能串口中断
  85   1              PS = 1;  // 提高串口中断优先级
  86   1          EA = 1;  // 使能全局中断
  87   1          
  88   1          // 设定值初始化
  89   1          SetValue = 0;  
  90   1          
  91   1          while (1) {
  92   2              // 主循环
  93   2          }
  94   1      }
  95          
  96          // 外部中断0服务函数
  97          void int0_isr() interrupt 0 {
  98   1          u16 x;
  99   1          float pid_output;
 100   1      
 101   1          // 读取传感器数据
 102   1          *((u8 *)&x + 1) = SPT_LOW_INPORT;
 103   1          *((u8 *)&x + 0) = SPT_HIG_INPORT;
 104   1          
 105   1          // 更新温度数据
 106   1          temperature = x;
 107   1          
 108   1          // 计算误差
 109   1          et_2 = et_1;
 110   1          et_1 = et;
 111   1          et = SetValue - (int)x;
 112   1      
 113   1          // 计算积分项 (使用梯形积分法)
 114   1          integral += (et + et_1) / 2.0f;
 115   1          
 116   1          // 应用积分限幅，防止积分饱和
 117   1          if (integral > 1000) integral = 1000;
C51 COMPILER V9.59.0.0   SEPTEMPERATUE                                                     06/24/2024 12:43:23 PAGE 3   

 118   1          if (integral < -1000) integral = -1000;
 119   1      
 120   1          // 计算微分项
 121   1          derivative = et - et_1;
 122   1      
 123   1          // PID控制算法
 124   1          pid_output = Kp * et + Ki * integral + Kd * derivative;
 125   1      
 126   1          // 更新PWM值
 127   1          pwm += pid_output;
 128   1      
 129   1          // PWM限幅
 130   1          if (pwm > 255) pwm = 255;
 131   1          if (pwm < 0) pwm = 0;
 132   1      
 133   1          // 输出PWM
 134   1          PWM_OUT_PORT = (u8)pwm;
 135   1      
 136   1          // 更新显示缓冲区
 137   1          DispBuff[2] = x / 100000;
 138   1          x = x % 100000;
 139   1          DispBuff[3] = x / 10000;
 140   1          x = x % 10000;
 141   1          DispBuff[4] = x / 1000;
 142   1          x = x % 1000;
 143   1          DispBuff[5] = x / 100;
 144   1          x = x % 100;
 145   1          DispBuff[6] = x / 10;
 146   1          x = x % 10;
 147   1          DispBuff[7] = x;
 148   1      }
 149          
 150          // 定时器0中断服务函数
 151          void timer0_isr() interrupt 1 {
 152   1          // 重装定时器初值
 153   1          TH0 = 0x3C;
 154   1          TL0 = 0xB0;
 155   1          
 156   1          // 发送温度数据
 157   1          send_temperature();
 158   1      }
 159          
 160          // 外部中断1服务函数
 161          void int1_isr() interrupt 2 {
 162   1          static u8 CurrentBit = 0x01;
 163   1      
 164   1          // 数码管显示编码
 165   1          u8 code SevenSegCode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 166   1          u8 code SevenSegBT[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 167   1              
 168   1          DT_DI_PORT = 0;
 169   1          DT_DA_PORT = SevenSegCode[DispBuff[CurrentBit]];
 170   1          DT_DI_PORT = SevenSegBT[CurrentBit];
 171   1              
 172   1          CurrentBit++;
 173   1          CurrentBit = CurrentBit % 8;
 174   1      }
 175          
 176          // 串口中断服务函数
 177          void serial_isr() interrupt 4 {
 178   1          if (RI) {
 179   2              RI = 0;
C51 COMPILER V9.59.0.0   SEPTEMPERATUE                                                     06/24/2024 12:43:23 PAGE 4   

 180   2              Re_Buff[ReceiveCounts++] = SBUF;
 181   2              
 182   2              if (ReceiveCounts == 6) {
 183   3                  ReceiveCounts = 0;
 184   3                  
 185   3                  // 处理设置温度值的命令
 186   3                  if ((Re_Buff[0] == 0x55) && (Re_Buff[1] == 0x01) && (Re_Buff[5] == 0xaa)) {
 187   4                      SetValue = (Re_Buff[3] << 8) | Re_Buff[4];
 188   4                      integral = 0; // 重置积分项
 189   4                      // 发送确认帧
 190   4                                      send_byte(0x55); 
 191   4                      send_byte(0x06); 
 192   4                      send_byte(0x00);
 193   4                      send_byte(0x00);
 194   4                      send_byte(0x00);
 195   4                      send_byte(0xaa);
 196   4                  }
 197   3                  // 处理设置PID参数的命令
 198   3                  else if ((Re_Buff[0] == 0x55) && (Re_Buff[1] == 0x02) && (Re_Buff[5] == 0xaa)) {
 199   4                      Kp = Re_Buff[2] / 10.0;
 200   4                      Ki = Re_Buff[3] / 100.0;
 201   4                      Kd = Re_Buff[4] / 10.0;
 202   4                      
 203   4                      // 发送确认帧附带当前PID参数
 204   4                      send_byte(0x55);  // 起始字节
 205   4                      send_byte(0x06);  // 命令字节
 206   4                      send_byte((u8)(Kp * 10));  // Kp
 207   4                      send_byte((u8)(Ki * 100));  // Ki
 208   4                      send_byte((u8)(Kd * 10));  // Kd
 209   4                      send_byte(0xaa);  // 结束字节
 210   4                  }
 211   3              }
 212   2          }
 213   1          
 214   1          if (TI) {
 215   2              TI = 0;
 216   2          }
 217   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1107    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
